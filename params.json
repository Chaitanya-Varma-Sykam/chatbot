{"name":"Chatbot","body":"Examples\r\n========\r\n*Documentation below*\r\nThe following is nothing more than connecting to the chat, idling in the room::\r\n\r\n  import chatbot\r\n\r\n\tclass MyBot(chatbot.ChatBot):\r\n\t\t\"\"\"\r\n\t\tThis class inherites the chatbot\r\n\t\t\"\"\"\r\n\r\n\t\tdef __init__(self, username, password, site):\r\n\t\t\tchatbot.ChatBot__init__(self,\r\n\t\t\t\t\t\tusername,\r\n\t\t\t\t\t\tpassword,\r\n\t\t\t\t\t\tsite)\r\n\r\n\r\n\tif __name__ == '__main__':\r\n\t\tbot = MyBot(\"MyUsername\", \"MyPassword\", \"http://mywiki.wikia.com\")\r\n\t\tbot.start()\r\n\r\nTo read the messages back to the user in terminal/command prompt, an event has to be used::\r\n\r\n\timport chatbot\r\n\r\n\tclass MyBot(chatbot.ChatBot):\r\n\r\n\t\tdef __init__(self, username, password, site):\r\n\t\t\tchatbot.ChatBot__init__(self,\r\n\t\t\t\t\t\tusername,\r\n\t\t\t\t\t\tpassword,\r\n\t\t\t\t\t\tsite)\r\n\r\n\t\tdef on_message(self, c, e):\r\n\t\t\t\"\"\"\r\n\t\t\tc - connection/client\r\n\t\t\te - event\r\n\t\t\tThis is what we'll use to gather and send data\r\n\t\t\t\"\"\"\r\n\t\t\tprint \"%s: %s\" % (e.user, e.text)\r\n\r\n\tif __name__ == '__main__':\r\n\t\tbot = MyBot(\"MyUsername\", \"MyPassword\", \"http://mywiki.wikia.com\")\r\n\t\tbot.start\r\n\r\nReplying multiple events in the chatroom, example being a kick and a ban::\r\n\r\n\timport chatbot\r\n\r\n\tclass MyBot(chatbot.ChatBot):\r\n\r\n\t\tdef __init__(self, username, password, site):\r\n\t\t\tchatbot.ChatBot__init__(self,\r\n\t\t\t\t\t\tusername,\r\n\t\t\t\t\t\tpassword,\r\n\t\t\t\t\t\tsite)\r\n\r\n\t\tdef on_kick(self, c, e):\r\n\t\t\tc.send(\"Oh dear!\")\r\n\r\n\t\tdef on_ban(self, c, e):\r\n\t\t\tc.send(\"Oh no! This is not good!\")\r\n\r\n\tif __name__ == '__main__':\r\n\t\tbot = MyBot(\"MyUsername\", \"MyPassword\", \"http://mywiki.wikia.com\")\r\n\t\tbot.start()\r\n\r\nDocumentation\r\n=============\r\n\r\nBelow is the documentation for setting up and using the chatbot module.  To see a basic chatbot for\r\nbetter understanding of the documentation, please refer to the examples.\r\n\r\nRequirements\r\n----------\r\n\r\nTo use this, there is one requirement:\r\n\r\n* `requests <http://docs.python-requests.org/en/latest/>`_\r\n\r\nThe easiest way to install requests, is through the `Python Package Index`_,\r\nso you can install the latest release with ``pip install requests``. \r\n\r\nIf you don't have pip, `get pip`_!\r\n\r\n.. _Python Package Index: http://pypi.python.org\r\n.. _get pip:              http://pypi.python.org/pypi/pip\r\n\r\nInstalling\r\n----------\r\n\r\nInstalling chatbot is very simple, if using pip (see above).  If using windows, \r\nopen up cmd.exe/command prompt and execute ``pip install chatbot``.  If using Mac OS X,\r\nit is similar to this, but run in terminal.  Execute ``pip install chatbot`` in terminal.\r\n\r\nTo make sure the installation worked, execute the following in your cmd.exe/terminal window:\r\n\r\n.. image:: https://raw.github.com/hairr/chatbot/master/_images/confirm.png\r\n\r\nIf you received an error, try executing the pip command again/make sure you successfully installed pip.\r\n\r\nSetting up\r\n----------\r\n\r\nTo first begin your script, you'll need to import the module::\r\n\r\n\timport chatbot\r\n\r\nFrom here, you'll need to inherit the class into your bot's class.::\r\n\r\n\tclass MyBot(chatbot.ChatBot):\r\n\r\nNow, you'll need to set up the initalizing parts in the class, this will connect the bot.::\r\n\r\n\tclass MyBot(chatbot.ChatBot):\r\n\t\tdef __init__(self):\r\n\t\t\tchatbot.ChatBot.__init__(self, \"username\", \"password\", \"http://wiki.wikia.com\")\r\n\r\nAfter this, the bot has to be started.  Starting is very simple to do when\r\nexecuting the file::\r\n\t\r\n\tif __name__ == '__main__':\r\n\t\tbot = MyBot()\r\n\t\tbot.start()\r\n\r\nThe complete file, without any other data, should look like so::\r\n\r\n\timport chatbot\r\n\r\n\tclass MyBot(chatbot.ChatBot):\r\n\t\tdef __init__(self):\r\n\t\t\tchatbot.ChatBot.__init__(self, \"username\", \"password\", \"http://wiki.wikia.com\")\r\n\r\n\tif __name__ == '__main__':\r\n\t\tbot = MyBot()\r\n\t\tbot.start()\r\n\r\nNow, you might be thinking: \"Where did start() come from?\"  It comes from the inherited class.  It gathers all the instances in the MyBot class (see below), as well as the data specified to run the bot.  So, it's very important to include that data!\r\n\r\nIf you're worried of privacy when putting the password down, please know: There is **no** way of knowing the information.  It is all stored on your computer and is sent to the wiki to login (exactly the same way you log into the wiki).\r\n\r\nInstances\r\n---------\r\nIn the chat, users can send message, go away, kick another user, etc.  The following are\r\nthe instances, so an action be performed as a result.  For better understanding of how to\r\ninclude the instances, please see the examples page.\r\n\r\nOn a message::\r\n\r\n\tdef on_message(self, c, e):\r\n\t\t\"\"\"\r\n\t\tWhen a message is sent by a user, anything here will be performed.\r\n\t\t\"\"\"\r\n\t\tpass\r\n\r\nWhen a user joins the chat::\r\n\r\n\tdef on_join(self, c, e):\r\n\t\t\"\"\"\r\n\t\tWhen a user joins the chat, anything here will be performed.\r\n\t\t\"\"\"\r\n\t\tpass\r\n\r\nWhen a user leaves the chat::\r\n\r\n\tdef on_leave(self, c, e):\r\n\t\t\"\"\"\r\n\t\tWhen a user leaves the chat, anything here will be performed.\r\n\t\t\"\"\"\r\n\t\tpass\r\n\r\nWhen a user goes \"away\" in chat::\r\n\r\n\tdef on_away(self, c, e):\r\n\t\t\"\"\"\r\n\t\tWhen a user goes away in chat, anything here will be performed.\r\n\t\t\"\"\"\r\n\t\tpass\r\n\r\nWhen a user comes back from being \"away\" in chat::\r\n\r\n\tdef on_back(self, c, e):\r\n\t\t\"\"\"\r\n\t\tWhen a user comes back from being away in chat, anything here will be performed.\r\n\t\t\"\"\"\r\n\t\tpass\r\n\r\nWhen a user is kicked from chat::\r\n\r\n\tdef on_kick(self, c, e):\r\n\t\t\"\"\"\r\n\t\tWhen a user is kicked from chat, anything here will be performed.\r\n\t\t\"\"\"\r\n\t\tpass\r\n\r\nWhen a user is banned from chat::\r\n\r\n\tdef on_ban(self, c, e):\r\n\t\t\"\"\"\r\n\t\tWhen a user is banned from chat, anything here will be performed.\r\n\t\t\"\"\"\r\n\t\tpass\r\n\r\nWhen a user is given chat moderator rights from chat::\r\n\r\n\tdef on_chatmod(self, c, e):\r\n\t\t\"\"\"\r\n\t\tWhen a user is given the chat moderator rights in chat, anything here will be performed.\r\n\t\t\"\"\"\r\n\t\tpass\r\n\r\nWhen the bot joins the chat::\r\n\r\n\tdef on_welcome(self, c, e):\r\n\t\t\"\"\"\r\n\t\tWhen the bot joins the chat, anything here will be performed.\r\n\t\t\"\"\"\r\n\t\tpass\r\n\r\nConnection/Client\r\n-----------------\r\n\r\nAfter connecting to the chatroom, there are several connection commands that will\r\nallow a user/bot to perform actions.\r\n\r\n.. function:: c.send(message)\r\n\t\r\n\tSends a message to the chatroom\r\n\r\n\t:param message: Message to be sent\r\n\r\n.. function:: c.go_away()\r\n\r\n\tGoes \"away\" in the chatroom, as the bot will not go \"away\" by default\r\n\r\n.. function:: c.come_back()\r\n\r\n\tComes back from the chat room, after being away\r\n\r\n.. function:: c.kick_user(user)\r\n\r\n\tKicks a user from the chatroom\r\n\r\n\t:param user: User to kick\r\n\t.. note::\r\n\t\tIf the user/bot does not have the chatmoderator right, a kick will not preform.\r\n\r\n.. function:: c.ban_user(user[, time=3600[, reason=\"Misbehaving in chat\"]])\r\n\t\r\n\tBans a user from the chatroom.\r\n\r\n\t:param user: User to ban\r\n\t:param time: Time of ban, in seconds\r\n\t:param reason: Reason of the ban\r\n\t:type time: integer\r\n\t:type reason: string\r\n\t.. note::\r\n\t\tif the user/bot does not have the chatmoderator right, a ban will not preform\r\n\r\n.. function:: c.end_ban(user[, reason=\"Ending chat ban\"])\r\n\r\n\tEnds a chatban for a user\r\n\r\n\t:param user: User to unban\r\n\t:param reason: Reason of the unbanning\r\n\t:type reason: string\r\n\t.. note::\r\n\t\tIf the user/bot does not have the chatmoderator right, the ban can not be ended\r\n\r\n.. function:: c.give_chatmod(user)\r\n\r\n\tGives the chatmoderator right to a user.\r\n\r\n\t:param user: User to give the chat moderator right to\r\n\r\n\t.. note::\r\n\t\t\tIf the user/bot does not have the sysop right, the chatmoderator right can not be given\r\nEvents\r\n---------\r\nIn the chat room, there are few events that can be gathered for information\r\n\r\n.. data:: e.user\r\n\r\n\tRetrieves the user of the event.\r\n\r\n\tNote: ``on_kick``, ``on_chatmod`` and ``on_ban`` return arrays with the users involved.\r\n\r\n\t:rtype: string\r\n\r\n.. data:: e.text\r\n\r\n\tRetrieves the text from the message.\r\n\r\n\t:rtype: string or None\r\n\r\n.. data:: e.status\r\n\r\n\tRetrieves the status of the user for ``on_away`` and ``on_back``.\r\n\r\n\t:rtype: string or None","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A chatbot module for Wikia"}